// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pond

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PondServiceClient is the client API for PondService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PondServiceClient interface {
	Dashboard(ctx context.Context, in *DashboardRequest, opts ...grpc.CallOption) (*DashboardResponse, error)
}

type pondServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPondServiceClient(cc grpc.ClientConnInterface) PondServiceClient {
	return &pondServiceClient{cc}
}

func (c *pondServiceClient) Dashboard(ctx context.Context, in *DashboardRequest, opts ...grpc.CallOption) (*DashboardResponse, error) {
	out := new(DashboardResponse)
	err := c.cc.Invoke(ctx, "/protobuf.pond.v1.PondService/Dashboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PondServiceServer is the server API for PondService service.
// All implementations must embed UnimplementedPondServiceServer
// for forward compatibility
type PondServiceServer interface {
	Dashboard(context.Context, *DashboardRequest) (*DashboardResponse, error)
	mustEmbedUnimplementedPondServiceServer()
}

// UnimplementedPondServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPondServiceServer struct {
}

func (UnimplementedPondServiceServer) Dashboard(context.Context, *DashboardRequest) (*DashboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Dashboard not implemented")
}
func (UnimplementedPondServiceServer) mustEmbedUnimplementedPondServiceServer() {}

// UnsafePondServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PondServiceServer will
// result in compilation errors.
type UnsafePondServiceServer interface {
	mustEmbedUnimplementedPondServiceServer()
}

func RegisterPondServiceServer(s grpc.ServiceRegistrar, srv PondServiceServer) {
	s.RegisterService(&PondService_ServiceDesc, srv)
}

func _PondService_Dashboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PondServiceServer).Dashboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.pond.v1.PondService/Dashboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PondServiceServer).Dashboard(ctx, req.(*DashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PondService_ServiceDesc is the grpc.ServiceDesc for PondService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PondService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.pond.v1.PondService",
	HandlerType: (*PondServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Dashboard",
			Handler:    _PondService_Dashboard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/pond/v1/pond.proto",
}
